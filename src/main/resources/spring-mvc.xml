<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!-- 自动扫描且只扫描@Controller -->
	<context:component-scan base-package="k0n9.**.web" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.web.servlet.config.annotation.EnableWebMvc" />
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

    <!-- 加载配置属性文件 -->
    <context:property-placeholder ignore-unresolvable="true" location="classpath:k0n9.properties" />

    <!-- 内容协商管理器  -->
    <!--1、首先检查路径扩展名（如my.pdf）；2、其次检查Parameter（如my?format=pdf）；3、检查Accept Header-->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
        <property name="favorPathExtension" value="true"/>
        <!-- 用于开启 /userinfo/123?format=json 的支持 -->
        <property name="favorParameter" value="true"/>
        <property name="parameterName" value="format"/>
        <!-- 是否忽略Accept Header -->
        <property name="ignoreAcceptHeader" value="false"/>

        <property name="mediaTypes"> <!--扩展名到MIME的映射；favorPathExtension, favorParameter是true时起作用  -->
            <value>
                json=application/json
                xml=application/xml
                html=text/html
            </value>
        </property>
        <!-- 默认的content type -->
        <property name="defaultContentType" value="text/html"/>
	</bean>

	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
            <!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
            <!-- 将Jackson2HttpMessageConverter的默认格式化输出设为true -->
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="prettyPrint" value="true" />
				<!-- 对日期类型的数据@ResponseBody返回日期格式 -->
				<property name="objectMapper">
					<bean class="com.fasterxml.jackson.databind.ObjectMapper">
						<property name="dateFormat">
							<bean class="java.text.SimpleDateFormat">
								<constructor-arg type="java.lang.String" value="yyyy-MM-dd"/>
							</bean>
						</property>
					</bean>
				</property>
			</bean>

		</mvc:message-converters>
	</mvc:annotation-driven>

	<!--<bean class="k0n9.core.web.exception.AnnotationHandlerMethodExceptionResolver">-->
		<!--<property name="contentNegotiationManager" ref="contentNegotiationManager" />-->
	<!--</bean>-->

    <!-- 定义JSP文件的位置 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

    <!--<bean id="freemarkerConfigurer"-->
          <!--class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">-->
        <!--<property name="templateLoaderPath" value="/WEB-INF/views/" />-->
        <!--<property name="defaultEncoding" value="UTF-8" />-->
        <!--<property name="freemarkerSettings">-->
            <!--<props>-->
                <!--<prop key="template_update_delay">10</prop>-->
                <!--<prop key="locale">zh_CN</prop>-->
                <!--<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>-->
                <!--<prop key="date_format">yyyy-MM-dd</prop>-->
                <!--<prop key="number_format">#.##</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->

    <!-- FreeMarker视图解析 如返回userinfo。。在这里配置后缀名ftl和视图解析器。。 -->
    <!--<bean id="viewResolver"-->
          <!--class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">-->
        <!--<property name="viewClass"-->
                  <!--value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />-->
        <!--<property name="suffix" value=".ftl" />-->
        <!--<property name="contentType" value="text/html;charset=UTF-8" />-->
        <!--<property name="exposeRequestAttributes" value="true" />-->
        <!--<property name="exposeSessionAttributes" value="true" />-->
        <!--<property name="exposeSpringMacroHelpers" value="true" />-->
    <!--</bean>-->

    <!-- 容器默认的DefaultServletHandler处理 所有静态内容与无RequestMapping处理的URL -->
	<mvc:default-servlet-handler />

    <!-- 定义无需Controller的url<->view直接映射 -->
    <mvc:view-controller path="/" view-name="redirect:${adminPath}"/>
    <!-- 当在web.xml 中 DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源 -->
    <mvc:default-servlet-handler/>

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置上传文件的最大尺寸为100MB -->
        <property name="maxUploadSize" value="104857600"/>
	</bean>

    <!-- 支持 Shiro对Controller的方法级AOP安全控制 begin -->
	<!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">-->
		<!--<property name="proxyTargetClass" value="true" />-->
	<!--</bean>-->

	<!--<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">-->
		<!--<property name="securityManager" ref="securityManager" />-->
	<!--</bean>-->
    <!-- end -->
    <!-- 控制器异常处理 -->
    <bean id="exceptionHandlerExceptionResolver" class="org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver">
        <property name="contentNegotiationManager" ref="contentNegotiationManager"/>
    </bean>
</beans>
