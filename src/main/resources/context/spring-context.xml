<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd"
	default-lazy-init="false">

	<description>Spring Configuration</description>
	
    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:k0n9.properties" />
	
	<!-- 加载应用属性实例，可通过  @Value("#{APP_PROP['jdbc.driver']}") String jdbcDriver 方式引用 -->
    <util:properties id="APP_PROP" location="classpath:k0n9.properties" local-override="true"/>

    <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
    <context:component-scan base-package="k0n9.**.dao,k0n9.**.service" scoped-proxy="targetClass">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>

 	<!-- MyBatis begin -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="k0n9"/>
        <property name="typeAliasesSuperType" value="k0n9.common.entity.BaseEntity"/>
        <property name="mapperLocations" value="classpath:/mappings/**/*.xml"/>
        <property name="configLocation" value="classpath:/mybatis-config.xml"/>
    </bean>
    
    <!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="k0n9.**.dao"/>
        <property name="annotationClass" value="k0n9.common.dao.annotation.MyBatisDao"/>
    </bean>
    
    <!-- 定义事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    <!-- MyBatis end -->
    
	<!-- 配置 JSR303 Bean Validator 定义 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!-- 缓存配置 -->
	<!--<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">-->
		<!--<property name="configLocation" value="classpath:${ehcache.configFile}" />-->
	<!--</bean>-->
    <!-- c3p0 connection pool configuration -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <!-- 数据库驱动 -->
        <property name="driverClass" value="${db.driver.class}" />
        <!-- 连接URL串 -->
        <property name="jdbcUrl" value="${db.url}" />
        <!-- 连接用户名 -->
        <property name="user" value="${db.username}" />
        <!-- 连接密码 -->
        <property name="password" value="${db.password}" />
        <!-- 初始化连接池时连接数量为5个 -->
        <property name="initialPoolSize" value="5" />
        <!-- 允许最小连接数量为5个 -->
        <property name="minPoolSize" value="5" />
        <!-- 允许最大连接数量为20个 -->
        <property name="maxPoolSize" value="20" />
        <!-- 允许连接池最大生成100个PreparedStatement对象 -->
        <property name="maxStatements" value="100" />
        <!-- 连接有效时间，连接超过3600秒未使用，则该连接丢弃 -->
        <property name="maxIdleTime" value="3600" />
        <!-- 连接用完时，一次产生的新连接步进值为2 -->
        <property name="acquireIncrement" value="2" />
        <!-- 获取连接失败后再尝试10次，再失败则返回DAOException异常 -->
        <property name="acquireRetryAttempts" value="10" />
        <!-- 获取下一次连接时最短间隔600毫秒，有助于提高性能 -->
        <property name="acquireRetryDelay" value="600" />
        <!-- 检查连接的有效性 -->
        <property name="testConnectionOnCheckin" value="true" />
        <!-- 每个1200秒检查连接对象状态 -->
        <property name="idleConnectionTestPeriod" value="1200" />
        <!-- 获取新连接的超时时间为1000毫秒 -->
        <property name="checkoutTimeout" value="10000" />
    </bean>
    <!-- 数据源配置, 使用应用服务器的数据库连接池
    <jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/jeesite" />-->

	<!-- 数据源配置, 不使用连接池 
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>-->
	
</beans>